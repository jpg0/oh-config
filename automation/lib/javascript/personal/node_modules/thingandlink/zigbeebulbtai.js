const zigbeetai = require('./zigbeetai');
const { items, metadata, rules, triggers } = require('ohj');
const log = require('ohj').log('zigbeebulbtai');
const colorlights = require('colorlights');
const { LocalTime } = require('js-joda');

class ZigbeeColorBulbTAI extends zigbeetai.ZigbeeTAI {
    init(config) {
        super.init(config);
        this.use_rgb = config.use_rgb || false;
    }

    buildObjects() {
        super.buildObjects();
        
        let colorChannel = this.buildColorChannel();
        
        let groups = [...this.groups];
        if (this.zigbeeGroupId) {
            groups.push(`gz${this.zigbeeGroupId}`);
        }

        log.debug(`Using groups: ${this.groups}`);

        let realItem = items.createItem(`${this.itemPrefix}${this.id}_Light_Real`, 'Color', 'light', [], `${this.name} Light (Real)`);
        this.linkItemToChannel(realItem, colorChannel);

        let proxyItem = items.createItem(`${this.itemPrefix}${this.id}_Light`, 'Color', 'light', groups, `${this.name} Light`, [...this.tags, "ColorLight"]);
        this.metadata.push(metadata.createMetadata(proxyItem.name, 'zigbeeId', this.zigbeeId));
        this.metadata.push(metadata.createMetadata(proxyItem.name, 'proxyFor', realItem.name));
        this.items.push(proxyItem);
    }

    buildColorChannel() {
        return this.withNewMQTTChannel("State", "Color", "colorHSB", {
            commandTopic: `${this.mqttRoot}/${this.zigbeeId}/set`,
            transformationPatternOut: `JS:z2m_color${this.use_rgb?"_rgb":""}.js`,
            stateTopic: `${this.mqttRoot}/${this.zigbeeId}`,
            transformationPattern: "JS:z2m_color_incoming.js",
        })
    }
}

class ZigbeeDualColorBulbTAI extends zigbeetai.ZigbeeTAI {
    init(config) {
        super.init(config);
        this.itemPrefix = config.itemPrefix || '';
    }

    buildObjects() {
        this.colorItem = items.createItem(`${this.itemPrefix}${this.id}_Light_Real`, 'Color', 'light', [], `${this.name} Light RGB (Real)`);
        this.linkItemToChannel(this.colorItem, this.buildColorChannel());

        let groups = [...this.groups];
        if (this.zigbeeGroupId) {
            groups.push(`gz${this.zigbeeGroupId}`);
        } else {
            groups.push('gColorLights');
        }

        this.proxyItem = items.createItem(`${this.itemPrefix}${this.id}_Light`, 'Color', 'light', groups, `${this.name} Light`, ["DualLEDs"]);
        this.metadata.push(metadata.createMetadata(this.proxyItem.name, 'proxyForColor', this.colorItem.name));
        this.metadata.push(metadata.createMetadata(this.proxyItem.name, 'zigbeeId', this.zigbeeId));
        this.items.push(this.proxyItem);
    }

    buildColorChannel() {
        return this.withNewMQTTChannel("color", "Color", "colorHSB", {
            commandTopic: `${this.mqttRoot}/${this.zigbeeId}/set`,
            transformationPatternOut: "JS:z2m_dual.js"
        })
    }

    activateRules() {
        super.activateRules();
    
        rules.JSRule({
            name: `multiplex dual leds for ${this.proxyItem.name}`,
            triggers: [triggers.ItemCommandTrigger(this.proxyItem.name)],
            execute: (args) => {
                let receivedCommand = args.payload.value;
                let currentState = this.proxyItem.state;    
                
                log.debug("multiplexing proxy for {} received command {}", this.proxyItem.name, receivedCommand);
    
                if (receivedCommand.toString() === "ON") {
                    receivedCommand = colorlights.determineColor(this.proxyItem, LocalTime.now());
                }

                //to go from WW to RGB we need to first set the brightness to 0
                if(
                    colorlights.isWarmWhite(currentState.toString()) && 
                    !colorlights.isWarmWhite(receivedCommand.toString())) {
                    this.colorItem.sendCommand("0,0,0");
                }

                this.colorItem.sendCommand(receivedCommand.toString());
            }
        });

    }
}

module.exports = {
    ZigbeeColorBulbTAI,
    ZigbeeDualColorBulbTAI
};