const zigbeetai = require('./zigbeetai');
const { items, metadata } = require('ohj');
const log = require('ohj').log('xiaomizigbeetai');
const { Duration } = require('js-joda'); //upd:vendor

class XiaomiZigbeeEndDeviceTAI extends zigbeetai.ZigbeeTAI {
    init(config) {
        this.equipmentType = "Sensor";
        this.equipmentTypeLabel = "Unknown";
        super.init(config);
        this.maxDurationWithoutContact = config.maxDurationWithoutContact;
    }

    buildObjects(){
        super.buildObjects();

        this.equipmentItem = items.createItem(`g${this.id}_${this.equipmentTypeLabel}_Equipment`, 'Group', null, [...this.groups], `${this.id} ${this.equipmentTypeLabel}`, [...this.tags, this.equipmentType]),

        this.items.push(this.equipmentItem);

        this.groups.push('gHasLastUpdated');
        
        this.lastUpdatedItem = items.createItem(`${this.id}_${this.equipmentTypeLabel}_LastUpdated`, 'DateTime', 'clock', ['gLastUpdated', this.equipmentItem.name], `${this.id} Last Seen [JS(since.js):%s]`);
        if(this.maxDurationWithoutContact) { 
            this.addMetadataToItem(this.lastUpdatedItem, require('lastupdated').MAX_DURATION_WITHOUT_CONTACT_KEY, this.maxDurationWithoutContact.toString());
        }

        this.items.push(this.lastUpdatedItem);

        this.measurementGroupItem = items.createItem(`g${this.id}_${this.equipmentTypeLabel}_Measurements`, 'Group', null, ['gMeasurements'], `${this.id}: All measurements`);
        this.items.push(this.measurementGroupItem);


        let batteryItem = items.createItem(`${this.id}_${this.equipmentTypeLabel}_Battery`, 'Number', 'batterylevel', ['gBattery', this.measurementGroupItem.name, this.equipmentItem.name], `${this.id} Battery [%.1f%%]`, ["Measurement", "Voltage"]);

        let batteryChannel = this.withNewMQTTChannel("battery", "Number", "number", {
            stateTopic: `${this.mqttRoot}/${this.zigbeeId}`,
            transformationPattern: "JSONPATH:$.battery"
        });

        this.linkItemToChannel(batteryItem, batteryChannel);
    }

    linkItemToChannel(item, channel, config) {
        super.linkItemToChannel(item, channel, config);
        this.setLastUpdatedItem(item);
    }

    setLastUpdatedItem(forItem) {
        this.metadata.push(metadata.createMetadata(forItem.name, 'lastupdated_item', this.lastUpdatedItem.name));
    }
}

class AqaraButtonTAI extends XiaomiZigbeeEndDeviceTAI {
    init(config) {
        super.init({
            ...config,
            maxDurationWithoutContact: Duration.ofDays(14)
        });

        this.equipmentTypeLabel = "Button";
        this.equipmentType = "WallSwitch";
    }

    buildObjects(){
        super.buildObjects();

        this.linkItemToChannel(
            items.createItem(`${this.id}_${this.equipmentTypeLabel}_Button`, 'String', null, [this.equipmentItem.name], `${this.id} Button`, ["Switch"]),
            this.withNewMQTTChannel("state", "String", "string", {
                stateTopic: `${this.mqttRoot}/${this.zigbeeId}`,
                transformationPattern: "JS:aqara_button.js"
            }), {
                expire:"1s,null"
            }
        )
    }
}

class AqaraMotionTAI extends XiaomiZigbeeEndDeviceTAI {
    init(config) {
        super.init({
            ...config,
            maxDurationWithoutContact: Duration.ofDays(3)
        });

        this.equipmentTypeLabel = "Motion";
        this.equipmentType = "MotionDetector";
    }

    buildObjects(){
        super.buildObjects();

        this.linkItemToChannel(
            items.createItem(`${this.id}_${this.equipmentTypeLabel}_Illuminance`, 'Number', 'light', [this.equipmentItem.name, 'gIlluminance',this.measurementGroupItem.name], `${this.id} Illuminance [%.1f]`, ["Measurement", "Light"]),
            this.withNewMQTTChannel("Illuminance", "Number", "number", {
                stateTopic: `${this.mqttRoot}/${this.zigbeeId}`,
                transformationPattern: "JSONPATH:$.illuminance"
            })
        );

        this.linkItemToChannel(
            items.createItem(`${this.id}_${this.equipmentTypeLabel}_Occupancy`, 'Contact', 'occupancy', [this.equipmentItem.name, 'gOccupancy',this.measurementGroupItem.name], `${this.id} Occupancy`, ["Measurement", "Presence"]),
            this.withNewMQTTChannel("Occupancy", "Contact", "contact", {
                stateTopic: `${this.mqttRoot}/${this.zigbeeId}`,
                transformationPattern: "JS:occupancy.js"
            })
        );
    }
}

class AqaraContactTAI extends XiaomiZigbeeEndDeviceTAI {
    init(config) {
        super.init({
            ...config,
            maxDurationWithoutContact: Duration.ofDays(3)
        });

        this.contactGroups = config.contactGroups || [];
        this.equipmentTypeLabel = "Contact";

    }

    buildObjects(){
        super.buildObjects();

        this.linkItemToChannel(
            items.createItem(`${this.id}_${this.equipmentTypeLabel}_Contact`, 'Contact', 'door', [this.equipmentItem.name, 'gContact',this.measurementGroupItem.name, ...this.contactGroups], `${this.id} Contact`, ["Opening", "OpenState"]),
            this.withNewMQTTChannel("state", "Contact", "contact", {
                stateTopic: `${this.mqttRoot}/${this.zigbeeId}`,
                transformationPattern: "JS:z2m_contact.js"
            }), {
                zigbeeId: this.zigbeeId
            }
        )
    }
}

class MijiaTemperatureTAI extends XiaomiZigbeeEndDeviceTAI {
    init(config) {
        super.init(config);
        this.equipmentTypeLabel = "Temperature";
        this.temperatureGroup = config.temperatureGroup;
        this.maxDurationWithoutContact = config.maxDurationWithoutContact || Duration.ofDays(1);
    }

    buildObjects(){
        super.buildObjects();

        this.linkItemToChannel(
            items.createItem(`${this.id}_${this.equipmentTypeLabel}_Temperature`, 'Number', 'temperature', [this.equipmentItem.name, 'gTemperature', this.measurementGroupItem.name, this.temperatureGroup], `${this.name} Temperature [%.1f Â°C]`, ["Measurement", "Temperature"]),
            this.withNewMQTTChannel("temperature", "Number", "number", {
                stateTopic: `${this.mqttRoot}/${this.zigbeeId}`,
                transformationPattern: "JSONPATH:$.temperature"
            }), {
                zigbeeId: this.zigbeeId
            }
        );

        this.linkItemToChannel(
            items.createItem(`${this.id}_${this.equipmentTypeLabel}_Humidity`, 'Number', 'water', [this.equipmentItem.name, 'gHumidity',this.measurementGroupItem.name], `${this.id} Humidity [%.1f]`, ["Measurement", "Humidity"]),
            this.withNewMQTTChannel("humidity", "Number", "number", {
                stateTopic: `${this.mqttRoot}/${this.zigbeeId}`,
                transformationPattern: "JSONPATH:$.humidity"
            }), {
                zigbeeId: this.zigbeeId
            }
        );
    }
}

class AqaraTemperatureTAI extends MijiaTemperatureTAI {
    init(config) {
        super.init(config);
        this.maxDurationWithoutContact = config.maxDurationWithoutContact || Duration.ofDays(1);
    }

    buildObjects(){
        super.buildObjects();

        this.linkItemToChannel(
            items.createItem(`${this.id}_${this.equipmentTypeLabel}_Pressure`, 'Number', 'pressure', [this.equipmentItem.name, 'gPressure',this.measurementGroupItem.name], `${this.id} Pressure [%.1f]`, ["Measurement", "Pressure"]),
            this.withNewMQTTChannel("pressure", "Number", "number", {
                stateTopic: `${this.mqttRoot}/${this.zigbeeId}`,
                transformationPattern: "JSONPATH:$.pressure"
            }), {
                zigbeeId: this.zigbeeId
            }
        );
    }
}

class AqaraSwitchTAI extends zigbeetai.ZigbeeTAI {
    init(config) {
        super.init(config);
        this.equipmentType = "PowerOutlet";
        this.equipmentTypeLabel = "Switch";
        this.maxDurationWithoutContact = config.maxDurationWithoutContact || Duration.ofDays(1);
    }

    buildObjects(){
        super.buildObjects();

        this.equipmentItem = items.createItem(`g${this.id}_${this.equipmentTypeLabel}_Equipment`, 'Group', null, [...this.groups], `${this.id} ${this.equipmentTypeLabel}`, [...this.tags, this.equipmentType]),

        this.items.push(this.equipmentItem);

        this.linkItemToChannel(
            items.createItem(`${this.id}_${this.equipmentTypeLabel}_Switch`, 'Switch', 'light', [this.equipmentItem.name, ...this.groups], `${this.id} Switch`, ["Switch"]),
            this.withNewMQTTChannel("state", "Switch", "switch", {
                stateTopic: `${this.mqttRoot}/${this.zigbeeId}`,
                transformationPattern: "JSONPATH:$.state",
                commandTopic: `zigbee2mqtt/${this.zigbeeId}/set`, 
                transformationPatternOut: "MAP:zjson.map",
            }));

        this.linkItemToChannel(
            items.createItem(`${this.id}_${this.equipmentTypeLabel}_Switch_Power`, 'Number', 'energy', [this.equipmentItem.name, 'gHourlyStats'], `${this.id} Power`, ["Measurement", "Power"]),
            this.withNewMQTTChannel("power", "Number", "number", {
                stateTopic: `${this.mqttRoot}/${this.zigbeeId}`,
                transformationPattern: "JSONPATH:$.consumption"
            }));

        this.linkItemToChannel(
            items.createItem(`${this.id}_${this.equipmentTypeLabel}_Switch_Temperature`, 'Number', 'temperature', [this.equipmentItem.name, 'gHourlyStats'], `${this.id} Switch Temperature`, ["Measurement", "Temperature"]),
            this.withNewMQTTChannel("temperature", "Number", "number", {
                stateTopic: `${this.mqttRoot}/${this.zigbeeId}`,
                transformationPattern: "JSONPATH:$.temperature"
            }));
        
    }
}

module.exports = {
    AqaraButtonTAI,
    AqaraMotionTAI,
    AqaraContactTAI,
    AqaraSwitchTAI,
    MijiaTemperatureTAI,
    AqaraTemperatureTAI,
    XiaomiZigbeeEndDeviceTAI
};