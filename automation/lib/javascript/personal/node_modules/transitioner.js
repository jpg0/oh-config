const { osgi, actions, items } = require('ohj');
let logger = require('ohj').log('transitioner');
let itemChannelLinkRegistry = osgi.getService('org.eclipse.smarthome.core.thing.link.ItemChannelLinkRegistry', 'org.openhab.core.thing.link.ItemChannelLinkRegistry');
let broker = actions.get("mqtt", "mqtt:broker:mosquitto");

function lookupChannelFromItemName(itemName) {
    let channel = itemChannelLinkRegistry.getBoundThings(itemName).iterator().next().getChannels().get(0);
    return channel.getConfiguration().get('commandTopic');
}

function transition(itemName, hsb_string_or_on_off, transitionTime){
        logger.debug(`Transitioning light ${itemName}`)

        //find the channel
        let topic;
        
        try {
            topic = lookupChannelFromItemName(itemName);
        } catch (e) {
            try {
                topic = lookupChannelFromItemName(itemName + "_Real");
            } catch(e) {
                logger.warn(`failed to transition ${itemName} due to ${e.message}, switching instead...`);
                items.getItem(itemName).sendCommand(hsb_string_or_on_off);
            }
        }

        let msg = {
            "transition": transitionTime
        };
        
        switch(hsb_string_or_on_off) {
            case 'ON':
            case 'OFF':
                msg.state = hsb_string_or_on_off;
                break;
            default:
                let hsb = hsb_string_or_on_off.split(',');
                msg.brightness = Math.round(hsb[2] / 100 * 254);
                msg.color = {
					hue: Number(hsb[0]),
					saturation: Number(hsb[1])
                };
        }
        
        broker.publishMQTT(topic,  JSON.stringify(msg));
        logger.debug(`Transitioned light ${itemName}`)
    }


module.exports = {
    transition
}